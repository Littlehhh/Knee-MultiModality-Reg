    FilterType::Pointer filter = FilterType::New();
    filter->SetInput(fixed_reader->GetOutput());
//    filter->SetInput(moving_reader->GetOutput());
//    filter->Update();
//    vtkImageData *fixed_image_vtk = filter->GetOutput();
////    fixed_image_vtk->Print(std::cout);
//    // Convert the image to a polydata
//    vtkSmartPointer<vtkImageDataGeometryFilter> imageDataGeometryFilter =
//            vtkSmartPointer<vtkImageDataGeometryFilter>::New();
//    imageDataGeometryFilter->SetInputData(fixed_image_vtk);
//    imageDataGeometryFilter->Update();
//    vtkSmartPointer<vtkPolyData> vtkPointSet = imageDataGeometryFilter->GetOutput();
//    auto vtkCells = vtkPointSet->GetVerts();
//    auto PointSet = itkImageToPointSet<PointSetType, ImageType>(moving_reader);
////    viewer->addPointCloud<pcl::PointXYZ>(test);
//
//
//    // Create a mapper and actor
//    vtkSmartPointer<vtkPolyDataMapper> mapper =
//            vtkSmartPointer<vtkPolyDataMapper>::New();
//    mapper->SetInputConnection(imageDataGeometryFilter->GetOutputPort());
////    mapper->SetInputData(fixed_image_vtk);
//    vtkSmartPointer<vtkActor> actor =
//            vtkSmartPointer<vtkActor>::New();
//    actor->SetMapper(mapper);
//
//    // Visualization
//    vtkSmartPointer<vtkRenderer> renderer =
//            vtkSmartPointer<vtkRenderer>::New();
//    vtkSmartPointer<vtkRenderWindow> renderWindow =
//            vtkSmartPointer<vtkRenderWindow>::New();
//    renderWindow->AddRenderer(renderer);
//    vtkSmartPointer<vtkRenderWindowInteractor> renderWindowInteractor =
//            vtkSmartPointer<vtkRenderWindowInteractor>::New();
//    renderWindowInteractor->SetRenderWindow(renderWindow);
//    renderer->AddActor(actor);
//    renderer->SetBackground(0,0,0); // Background color white
//    renderWindow->Render();
//    renderWindow->SetSize(800, 600);
//    renderWindowInteractor->Start();
//
//}
//
